#version 460
#extension GL_GOOGLE_include_directive : require

#include "common_gpu.h"
layout(binding = 0, set = 0) buffer data0 { vec4 a_dataFullRes[]; }; //
layout(binding = 1, set = 0) buffer data1 { vec4 a_dataSmallRes[]; }; //
layout(binding = 2, set = 0) buffer dataUBO { ToneMapping_GPU_UBO_Data ubo; };



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 32, local_size_y = 8, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  int width; 
  int height; 
  uint iNumElementsZ; 
  uint tFlagsMask;    
} kgenArgs;



void main()
{
  bool runThisThread = true;
  const int i = int(gl_GlobalInvocationID[0]); 
  const int j = int(gl_GlobalInvocationID[1]); 
  if(i >= kgenArgs.width + 0 || j >= kgenArgs.height + 0)
    runThisThread = false;
    if(runThisThread)
  {
  
      vec4 average = vec4(0, 0, 0, 0);
      for(int y=0;y<4;y++)
        for(int x=0;x<4;x++)
          average += a_dataFullRes[pitch(i*4 + x, j*4 + y, uint(ubo.m_width))];
      
      a_dataSmallRes[pitch(uint(i), uint(j), uint(ubo.m_widthSmall))] = average*(1.0f/16.0f);
    
  }
}

