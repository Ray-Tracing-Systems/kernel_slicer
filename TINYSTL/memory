#pragma once 

namespace std
{
  template<class T> class shared_ptr 
  { 
  public:
    
    shared_ptr() : data(nullptr) {}
    shared_ptr(const T* a_data) : data(nullptr) {}
    template<class D> shared_ptr(const T* a_data, D deleter) : data(nullptr) {}

    T* get() { return data; }
    const T* get() const { return data; }

    T* operator->() { return data; }
    const T* operator->() const { return data; }

    bool operator==(shared_ptr<T> rhs) { return false; }
    bool operator==(void* rhs) { return false; }

    bool operator!=(shared_ptr<T> rhs) { return true; }
    bool operator!=(void* rhs) { return true; }

    template<class Base> operator shared_ptr<Base>() { return nullptr; } 

  protected:
    T* data; 
  };
  
  template<class T> class unique_ptr 
  { 
  public:
    unique_ptr() : data(nullptr) {}
    unique_ptr(const T* a_data) : data(nullptr) {}
    template<class D> unique_ptr(const T* a_data, D deleter) : data(nullptr) {}

    T* operator->() { return data; }
    const T* operator->() const { return data; }

    T* get() { return data; }
    const T* get() const { return data; }

    bool operator==(shared_ptr<T> rhs) { return false; }
    bool operator==(void* rhs) { return false; }

    bool operator!=(shared_ptr<T> rhs) { return true; }
    bool operator!=(void* rhs) { return true; }

  protected:
    T* data; 
  };

  template<class T> class weak_ptr 
  { 
  public:
    
    weak_ptr() : data(nullptr) {}
    weak_ptr(shared_ptr<T> a_ptr) : data(nullptr) {}
    weak_ptr(const T* a_data) : data(nullptr) {}
    template<class D> weak_ptr(const T* a_data, D deleter) : data(nullptr) {}

    weak_ptr& operator=(const shared_ptr<T> a_ptr) { return *this; }
    weak_ptr& operator=(const weak_ptr<T> a_ptr) { return *this; }

    T* get() { return data; }
    const T* get() const { return data; }

    T* operator->() { return data; }
    const T* operator->() const { return data; }

    bool operator==(shared_ptr<T> rhs) { return false; }
    bool operator==(weak_ptr<T> rhs) { return false; }
    bool operator==(void* rhs) { return false; }

    bool operator!=(shared_ptr<T> rhs) { return true; }
    bool operator!=(weak_ptr<T> rhs) { return true; }
    bool operator!=(void* rhs) { return true; }

    template<class Base> operator weak_ptr<Base>() { return nullptr; } 

  protected:
    T* data; 
  };

  template<class T, class ... Args> shared_ptr<T> make_shared(Args && ... args) { return nullptr; }
  template<class T, class ... Args> unique_ptr<T> make_unique(Args && ... args) { return nullptr; }
}