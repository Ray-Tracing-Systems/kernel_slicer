#ifndef STD_CMATH_H
#define STD_CMATH_H

float fmax(float a, float b);
float fmin(float a, float b);

float fmaxf(float a, float b);
float fminf(float a, float b);

float fabs (float x);
float sqrtf(float x);
float sqrt (float x);

float sin (float x);
float cos (float x);
float sinf(float x);
float cosf(float x);
float tanf(float x);

float sinh(float x);
float cosh(float x);
float tanh(float x);

float asin (float x);
float acos (float x);
float atan (float y_over_x);
float atan2 (float y, float x);

float asinh(float x);
float acosh(float x);
float atanh(float y_over_x);

float pow(float x, float power);
float powf(float x, float power);

float exp(float x);
float expf(float x);
float log2(float x);
float log(float x, float power);

float copysign(float eps, float val);

float floor(float x);
float ceil(float x);
float floorf(float x);

float isfinite(float x);
float copysign(float x, float y);

static const unsigned int RAND_MAX = 65535;
static const float        MAXFLOAT = 1e37f;

unsigned int rand();

namespace std
{
  template<typename T> T max(T a, T b) { return (a >  b) ? b : a; }
  template<typename T> T min(T a, T b) { return (a <= b) ? a : b; }

  template<typename T> T abs(T x)  { return (x >= 0) ? x : -x; }
  template<typename T> T sqrt(T x) { return x; }
  
  template<typename T> T sin(T x) { return x; }
  template<typename T> T cos(T x) { return x; }
  template<typename T> T tan(T x) { return x; }
  
  template<typename T> T pow(T x, T power) { return x; }
  template<typename T> T exp(T x)          { return x; }
  template<typename T> T log2(T x);
  template<typename T, typename U> T log(T x, U power);

  template<typename T> T asin  (T x) { return x; }
  template<typename T> T acos  (T x) { return x; }
  template<typename T> T atan  (T y_over_x) { return y_over_x; }
  template<typename T> T atan2 (T y, T x) { return y; }

  template<typename T> T floor(T x);
  template<typename T> T ceil(T x);

  template<typename T> T isfinite(T x);
  template<typename T> T copysign(T x, T y);

  template<typename T> T frexp (T arg, int* exp);
  template<typename T> T ldexp (T x, int exp );
  template<typename T> T modf  (T x, T* iptr );
};

#include <cstdint>

#endif
