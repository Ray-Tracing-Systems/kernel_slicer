#pragma once

namespace std
{

namespace chrono
{
  namespace steady_clock
  {
    template<typename T>
    struct time_point
    { 
      time_point<T> operator-(const time_point<T> rhs);
      operator int(){ return 0; }
      T data;
    };
  }

  typedef int duration;
  //typedef int time_point;
  typedef int nanoseconds;
  typedef int microseconds;
  typedef int miliseconds;
  typedef int seconds;

  template<typename T>
  struct time_point
  { 
    time_point<T> operator-(const time_point<T> rhs);
    operator int(){ return 0; }
    T data;
  };

  struct system_clock
  {
    typedef chrono::nanoseconds duration;
    static chrono::time_point<int> now();
  };

  typedef system_clock high_resolution_clock;
  
  template<typename castType>
  struct duration_cast_temp
  {
    float count() const { return 0.0f; }
  };
  
  template<typename castType>
  duration_cast_temp<castType> duration_cast(duration dur) { return duration_cast_temp<castType>(); }


  //std::chrono::time_point<std::chrono::high_resolution_clock> m_start = std::chrono::high_resolution_clock::now()
}

}